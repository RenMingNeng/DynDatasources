<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	 http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd"
	default-lazy-init="false">
	<context:property-placeholder location="classpath*:/myProperties.properties"
		ignore-resource-not-found="true" ignore-unresolvable="true" />
	<context:component-scan base-package="com.omar" />
	
	<bean id="localDataSources" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="${connection_pools.initial_pool_size}" />
		<property name="minPoolSize" value="${connection_pools.min_pool_size}" />
		<property name="maxPoolSize" value="${connection_pools.max_pool_size}" />
		<property name="maxIdleTime" value="${connection_pools.max_idle_time}" />
		<property name="acquireIncrement" value="${connection_pools.acquire_increment}" />
		<property name="checkoutTimeout" value="${connection_pools.checkout_timeout}" />
	</bean>
	
	<!-- JDE 中间表 数据源 -->
	<bean id="remoteDataSources" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${dyn.jdbc.url}" />
		<property name="user" value="${dyn.jdbc.username}" />
		<property name="password" value="${dyn.jdbc.password}" />
		<property name="initialPoolSize" value="${connection_pools.initial_pool_size}" />
		<property name="minPoolSize" value="${connection_pools.min_pool_size}" />
		<property name="maxPoolSize" value="${connection_pools.max_pool_size}" />
		<property name="maxIdleTime" value="${connection_pools.max_idle_time}" />
		<property name="acquireIncrement" value="${connection_pools.acquire_increment}" />
		<property name="checkoutTimeout" value="${connection_pools.checkout_timeout}" />
	</bean>
	
	<bean id="dynDatasources" class="com.omar.DynDatasources">
	    <property name="targetDataSources">
	        <map>
	            <entry key="localDataSources" value-ref="localDataSources"/>
	            <entry key="remoteDataSources" value-ref="remoteDataSources"/>
	        </map>
	    </property>
	    <property name="defaultTargetDataSource" ref="localDataSources"/>
	</bean>
	
	  <!-- dataSourceproxy 配置代理管理事务 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="dynDatasources" />
    </bean>
    
      <!-- myBatis文件 -->
    <!-- 通过扫描的模式，扫描目录在com.fashionshow.dao目录下 所有的接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.omar.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
        <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-configuration.xml"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:sql/*-mapper.xml</value>
            </list>
        </property>
    </bean>
    
    <!--配置拦截器（在执行service之前拦截，先执行MyInspectDatasource类中的aspectBefore方法）-->
    <bean id="myInspectDatasource" class="com.omar.util.MyInspectDatasource"/>
	<aop:config>
	    <aop:aspect id="myAspect" ref="myInspectDatasource">
	        <aop:before method="aspectBefore" pointcut-ref="pointCutHandler"/>
			<aop:pointcut expression="execution(* com.omar.service.*.*(..))" id="pointCutHandler" />
	    </aop:aspect>
	</aop:config>
    
    
    <!-- 编程式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
		<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" />
	</bean>
	
</beans>